package dacr.model

import dacr.indata.ColAttribute

/**
 * A model class representing aggregates of Grains.
 *
 * Get values generated by Grain in list format.
 * Generate one row at a time.
 */
class Sphere(colList: List<ColAttribute>) {

    private var grainList: MutableList<IGrain> = mutableListOf()

    /**
     * The Map of Count of Columns to make PK judgment and PrimaryKey.
     *
     * following case of PK judgement
     * 1. PK specified column is "Variable"（ignore when "Fixing"）
     * 2. PK specified column does not contain any "autoIncrement".
     *
     * When -1 is set as the count, counting is not performed thereafter.
     */
    private var pkMap = mutableMapOf<String, Boolean>()
    private var judgePKCnt = 0

    init {
        fun setPKInformation(grain: IGrain) {
            if(!grain.isPrimaryKey() || grain.isFixingValue() || judgePKCnt == -1) {
                return
            } else if(grain.isAutoIncrement()) {
                judgePKCnt = -1
            } else {
                judgePKCnt++
            }
        }

        var grain: IGrain
        for(column in colList) {
            grain = when (column.dataType.toUpperCase()) {
                ColAttribute.DATA_TYPE_CHAR      -> GrainChar(column)
                ColAttribute.DATA_TYPE_VARCHAR   -> GrainVarchar(column)
                ColAttribute.DATA_TYPE_VARCHAR2  -> GrainVarchar(column)
                ColAttribute.DATA_TYPE_INT       -> GrainInteger(column)
                ColAttribute.DATA_TYPE_INTEGER   -> GrainInteger(column)
                ColAttribute.DATA_TYPE_DATE      -> GrainDate(column)
                ColAttribute.DATA_TYPE_DATETIME  -> GrainDate(column)
                ColAttribute.DATA_TYPE_TIMESTAMP -> GrainTimestamp(column)
                else ->  throw IllegalStateException("unsupported DataType. " +
                        " columnName=" + column.name + " dataType=" + column.dataType)
            }

            setPKInformation(grain)
            grainList.add(grain)
        }
    }

    fun create(): List<String> = if(judgePKCnt > 0) createWithPK()
                                 else grainList.map(IGrain::create)

    private fun createWithPK(): List<String> {

        val valueList = mutableListOf<String>()
        var duplicateCount = 0
        // It should fluctuate according to generation number
        val maxDuplicateCount = 100

        PKisDuplicate@ while(true) {

            if(duplicateCount > maxDuplicateCount) {
                throw IllegalStateException("The number of generation attempts has reached the upper limit." +
                        "Stopped because there was a possibility of infinite loop.")
            }

            valueList.clear()
            var pkCnt = judgePKCnt
            var pkConcatStr = ""

            for(grain in grainList) {
                val value = grain.create()
                if(grain.isPrimaryKey() && !grain.isFixingValue()) {
                    pkConcatStr += value
                    pkCnt--
                    if(pkCnt == 0) {
                        if(pkMap.containsKey(pkConcatStr)) {
                            duplicateCount++
                            continue@PKisDuplicate
                        } else {
                            pkMap.put(pkConcatStr, true)
                        }
                    }
                }
                valueList.add(value)
            }
            break
        }
        return valueList
    }
}